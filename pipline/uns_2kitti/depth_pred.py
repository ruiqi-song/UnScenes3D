#!/usr/bin/env python3
# coding=utf-8
"""
brief: 
Version: v0.0.1
Author: knightdby  && knightdby@163.com
Date: 2025-05-16 09:34:18
Description: 
LastEditors: knightdby
LastEditTime: 2025-05-16 09:35:54
FilePath: /UnScenes3D/pipline/uns2kitti/depth_pred.py
Copyright 2025 by Inc, All Rights Reserved. 
2025-05-16 09:34:18
"""

import os
import json
from tqdm import tqdm
import os.path as osp
import shutil
import numpy as np


class Database:
    def __init__(self, data_dir, sweep=False):
        self.data_dir = data_dir
        self._load_timestamps(sweep)

    def _load_timestamps(self, sweep):
        clip_info_path = os.path.join(
            self.data_dir, 'imagesets/scene_info.json')
        with open(clip_info_path, "r", encoding='utf-8') as f:
            json_data = json.load(f)
        self.clip_info = {}
        for clip, value in json_data.items():
            frames = []
            frames.extend(value['samples'])
            if sweep:
                frames.extend(value['sweeps'])
            frames = sorted(frames)
            self.clip_info[clip] = frames


splits = {"train": ["00000", "00001", "00002", "00003", "00004", "00009", "00011", "00012", "00013", "00016",
                    "00017", "00018", "00019", "00021", "00022", "00024", "00025", "00026", "00027", "00028",
                    "00029", "00032", "00033", "00034", "00035", "00036", "00037", "00038", "00040", "00041",
                    "00042", "00043", "00044", "00045", "00046", "00047", "00049", "00050", "00052", "00053",
                    "00054", "00056", "00057", "00058", "00059", "00060", "00062", "00063", "00066", "00068",
                    "00069", "00070", "00072", "00074", "00078", "00079", "00082", "00083", "00084", "00085",
                    "00086", "00088", "00089", "00090", "00091", "00092", "00093", "00094", "00095", "00096",
                    "00097", "00098", "00099", "00100", "00101", "00102", "00103", "00104", "00105", "00106",
                    "00107", "00108", "00111", "00114", "00115", "00116", "00117", "00119", "00120", "00121",
                    "00122", "00123", "00124", "00126", "00128", "00130", "00131", "00132", "00133", "00134",
                    "00135", "00137", "00138", "00139", "00144", "00145", "00146", "00147", "00149", "00152",
                    "00154", "00155", "00156", "00157", "00158", "00159", "00160", "00161", "00162", "00164",
                    "00165", "00166", "00167", "00168", "00169", "00171", "00172", "00174", "00175", "00177",
                    "00178", "00180", "00183", "00184", "00194", "00195", "00196", "00197", "00198", "00200",
                    "00201", "00202", "00203", "00204", "00206", "00209", "00210", "00211", "00212", "00213",
                    "00214", "00216", "00218", "00219", "00220", "00222", "00223", "00224", "00225", "00227",
                    "00228", "00229", "00230", "00231", "00232", "00233", "00234", "00235", "00236", "00237",
                    "00238", "00240", "00241", "00244", "00246", "00247", "00249", "00250", "00251", "00253",
                    "00254", "00255", "00257", "00260", "00261", "00262", "00263", "00264", "00265", "00266",
                    "00267", "00268", "00269", "00270", "00271", "00273", "00275", "00276", "00278", "00279",
                    "00280", "00282", "00283", "00285", "00286", "00288", "00290", "00291", "00292", "00293",
                    "00294", "00295", "00296", "00297", "00298", "00299", "00300", "00301", "00302", "00303",
                    "00304", "00305", "00306", "00307", "00308", "00309", "00310", "00311", "00312", "00313",
                    "00314", "00315", "00317", "00318", "00319", "00320", "00322", "00323", "00324", "00325",
                    "00326", "00327", "00328", "00329", "00330", "00331", "00332", "00333", "00334", "00335",
                    "00336", "00337", "00338", "00339", "00340", "00342", "00345", "00347", "00348", "00350",
                    "00352", "00353", "00354", "00355", "00359", "00360", "00363", "00365", "00366", "00367",
                    "00368", "00369", "00370", "00371", "00372", "00374", "00375", "00376", "00377", "00378",
                    "00379", "00382", "00383", "00384", "00386", "00387", "00388", "00389", "00390", "00391",
                    "00392", "00393", "00394", "00395", "00399", "00401", "00404", "00405", "00406", "00407",
                    "00409", "00410", "00412", "00413", "00414", "00415", "00416", "00417", "00419", "00420",
                    "00421", "00422", "00423", "00424", "00425", "00426", "00429", "00431", "00433", "00434",
                    "00435", "00437", "00438", "00439", "00441", "00443", "00444", "00445", "00446", "00447",
                    "00448", "00449", "00452", "00453", "00454", "00456", "00458", "00459", "00460", "00461",
                    "00464", "00466", "00468", "00469", "00470", "00471", "00472", "00474", "00476", "00477"],
          "val": ["00006", "00007", "00014", "00015", "00039", "00048", "00055", "00061", "00064", "00075",
                  "00076", "00081", "00110", "00118", "00136", "00142", "00151", "00153", "00176", "00193",
                  "00226", "00239", "00242", "00243", "00256", "00258", "00259", "00284", "00316", "00341",
                  "00346", "00349", "00362", "00364", "00373", "00381", "00396", "00398", "00402", "00403",
                  "00408", "00450", "00451", "00457", "00465", "00473"],
          "test": ["00005", "00008", "00010", "00020", "00023", "00030", "00031", "00051", "00065", "00067",
                   "00073", "00077", "00080", "00087", "00109", "00112", "00113", "00125", "00127", "00129",
                   "00140", "00141", "00143", "00150", "00163", "00170", "00173", "00179", "00199", "00205",
                   "00207", "00208", "00215", "00217", "00221", "00245", "00248", "00252", "00272", "00274",
                   "00277", "00281", "00287", "00289", "00321", "00343", "00344", "00358", "00361", "00380",
                   "00385", "00397", "00400", "00411", "00418", "00427", "00428", "00430", "00432", "00440",
                   "00442", "00455", "00463", "00467", "00475"]
          }

if __name__ == "__main__":
    db = Database('./data', sweep=False)
    dataset_save_dir = './datasets/depth_elevation_task'
    imagesets = osp.join(dataset_save_dir, 'ImageSets')
    os.makedirs(imagesets, exist_ok=True)
    for k, v in tqdm(splits.items()):
        with open(os.path.join(imagesets, f"{k}.txt"), "w") as f:
            f.write("")
        for clip in v:
            stamps = sorted(db.clip_info[f'clip_{clip}'])
            for stamp in tqdm(stamps):
                img_path = os.path.join(
                    db.data_dir, f'images/{stamp}.jpg')
                depth_path = os.path.join(
                    db.data_dir, f'depths/{stamp}.png')
                height_path = os.path.join(
                    db.data_dir, f'elevation/{stamp}.png')
                if not osp.exists(depth_path) or not osp.exists(img_path) or not osp.exists(height_path):
                    print(depth_path, img_path, height_path)
                    continue

                img_name = osp.basename(img_path)[:-4]
                with open(os.path.join(imagesets, f"{k}.txt"), "a") as f:
                    f.write(img_name+'\n')
                img_save_path = osp.join(
                    dataset_save_dir, 'images', img_name+'.jpg')
                os.makedirs(os.path.dirname(img_save_path), exist_ok=True)
                depth_save_path = osp.join(
                    dataset_save_dir, 'depths', img_name+'.png')
                os.makedirs(os.path.dirname(depth_save_path), exist_ok=True)

                height_save_path = osp.join(
                    dataset_save_dir, 'heights', img_name+'.png')
                os.makedirs(os.path.dirname(height_save_path), exist_ok=True)

                shutil.copy(img_path, img_save_path)
                shutil.copy(depth_path, depth_save_path)
                shutil.copy(height_path, height_save_path)
